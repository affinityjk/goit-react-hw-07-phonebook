{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducers.js","services/contactAPI.js","redux/store.js","components/Container/Container.styled.js","components/Container/Container.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","components/Form/ContactsForm.styled.js","components/Form/ContactsForm.jsx","components/Contacts/ContactsList.styled.js","redux/contacts/contacts-selectors.js","components/Contacts/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Toast/Toast.jsx","App.jsx","index.js"],"names":["getFilterValue","createAction","filter","createReducer","actions","_","payload","combineReducers","contactAPI","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","addContact","mutation","newContact","url","method","body","invalidatesTags","deleteContact","contactId","useFetchContactsQuery","useAddContactMutation","useDeleteContactMutation","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","phonebook","contactsReducer","devTools","process","setupListeners","dispatch","StyledWrapper","Container","children","Wrapper","Title","Section","title","FormWrapper","Form","Label","Button","ValidationMessage","validationSchema","Yup","shape","name","min","max","required","number","phone","ContactsForm","data","useQueryState","handleAddContactOnSubmit","a","some","toast","error","success","nameInputId","nanoid","phoneInputId","initialValues","onSubmit","values","resetForm","htmlFor","id","type","placeholder","component","Contacts","Item","state","ContactsList","useSelector","filteredContacts","filterValue","contacts","normalizedFilter","toLowerCase","includes","sort","b","localeCompare","refetchOnReconnect","selectFromResult","isFetching","handleDeleteContactOnClick","map","size","color","onClick","Input","Filter","useDispatch","value","onChange","event","target","Toast","duration","position","containerStyle","top","toastOptions","style","border","padding","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95e849ed.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\n\nexport const getFilterValue = createAction(\"filter/get\");\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport { actions } from \"redux/contacts\";\n\nconst filter = createReducer(\"\", {\n  [actions.getFilterValue]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({ filter });\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nexport const contactAPI = createApi({\n  reducerPath: \"contactAPI\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://6129dddc068adf001789b947.mockapi.io/api/v1/\",\n  }),\n  tagTypes: [\"Contacts\"],\n\n  endpoints: (builder) => ({\n    fetchContacts: builder.query({\n      query: () => `/contacts`,\n      providesTags: [\"Contacts\"],\n    }),\n\n    addContact: builder.mutation({\n      query: (newContact) => ({\n        url: `/contacts`,\n        method: \"POST\",\n        body: newContact,\n      }),\n      invalidatesTags: [\"Contacts\"],\n    }),\n\n    deleteContact: builder.mutation({\n      query: (contactId) => ({\n        url: `/contacts/${contactId}`,\n        method: \"DELETE\",\n      }),\n      invalidatesTags: [\"Contacts\"],\n    }),\n  }),\n});\n\nexport const {\n  useFetchContactsQuery,\n  useAddContactMutation,\n  useDeleteContactMutation,\n} = contactAPI;\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { setupListeners } from \"@reduxjs/toolkit/query\";\nimport logger from \"redux-logger\";\nimport contactsReducer from \"./contacts/contacts-reducers\";\nimport { contactAPI } from \"services/contactAPI\";\n\nconst middleware = [...getDefaultMiddleware(), logger, contactAPI.middleware];\n\nconst store = configureStore({\n  reducer: {\n    phonebook: contactsReducer,\n    [contactAPI.reducerPath]: contactAPI.reducer,\n  },\n  devTools: process.env.NODE_ENV !== \"production\",\n  middleware,\n});\n\nsetupListeners(store.dispatch);\n\nexport { store };\n","import styled from \"@emotion/styled/macro\";\n\nexport const StyledWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  padding: 30px;\n  background-color: #ffffff;\n  border-radius: 5px;\n  border: 5px solid lightsteelblue;\n  width: 600px;\n`;\n","import PropTypes from \"prop-types\";\nimport { StyledWrapper } from \"./Container.styled\";\n\nfunction Container({ children }) {\n  return <StyledWrapper>{children}</StyledWrapper>;\n}\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import styled from \"@emotion/styled/macro\";\n\nexport const Wrapper = styled.section`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 30px;\n  padding-bottom: 30px;\n`;\n\nexport const Title = styled.h2`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 20px;\n\n  text-transform: uppercase;\n  font-size: 28px;\n  font-weight: 700;\n  color: steelblue;\n`;\n","import PropTypes from \"prop-types\";\nimport { Wrapper, Title } from \"./Section.styled\";\n\nfunction Section({ title, children }) {\n  return (\n    <Wrapper>\n      <Title>{title}</Title>\n      {children}\n    </Wrapper>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import { Form } from \"formik\";\nimport styled from \"@emotion/styled/macro\";\n\nexport const FormWrapper = styled(Form)`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Input = styled.input``;\n\nexport const Label = styled.label`\n  margin-bottom: 10px;\n`;\n\nexport const Button = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  min-width: 100px;\n  padding: 10px 12px;\n  margin-top: 15px;\n\n  font-size: 14px;\n  font-weight: 700;\n  color: #fff;\n  background-color: steelblue;\n  border: 1px solid transparent;\n  border-radius: 5px;\n  cursor: pointer;\n  text-transform: capitalize;\n\n  &:hover,\n  &:focus {\n    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\n  }\n`;\n\nexport const ValidationMessage = styled.div`\n  font-size: 12px;\n  color: purple;\n  margin-top: 5px;\n  margin-bottom: 5px;\n`;\n","import { nanoid } from \"nanoid\";\nimport { Formik, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"yup-phone\";\nimport {\n  FormWrapper,\n  Label,\n  Button,\n  ValidationMessage,\n} from \"./ContactsForm.styled\";\nimport { useAddContactMutation, contactAPI } from \"services/contactAPI\";\nimport toast from \"react-hot-toast\";\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(50, \"Too Long!\")\n    .required(\"Required\"),\n  number: Yup.string().phone(\n    \"+38\",\n    true,\n    \"Valid number type +38 (XXX) XXX-XX-XX\"\n  ),\n});\n\nfunction ContactsForm() {\n  const { data } = contactAPI.endpoints.fetchContacts.useQueryState(null, {});\n  const [addContact] = useAddContactMutation();\n\n  const handleAddContactOnSubmit = async (newContact) => {\n    if (data?.some(({ name }) => name === newContact.name)) {\n      toast.error(`Contact ${newContact.name} already exists`);\n      return;\n    }\n\n    try {\n      await addContact(newContact);\n      toast.success(`Contact ${newContact.name} created`);\n    } catch (error) {\n      toast.error(error);\n    }\n  };\n\n  let nameInputId = nanoid(3);\n  let phoneInputId = nanoid(3);\n\n  return (\n    <Formik\n      initialValues={{ name: \"\", number: \"\" }}\n      validationSchema={validationSchema}\n      onSubmit={(values, { resetForm }) => {\n        const { name, number } = values;\n        handleAddContactOnSubmit({ name, number });\n        resetForm();\n      }}\n    >\n      <FormWrapper>\n        <Label htmlFor={`id-${nameInputId}`}>Name</Label>\n        <Field\n          id={`id-${nameInputId}`}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Name\"\n        />\n        <ErrorMessage name=\"name\" component={ValidationMessage} />\n\n        <Label htmlFor={`id-${phoneInputId}`}>Number</Label>\n        <Field\n          id={`id-${phoneInputId}`}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"+38 (XXX) XXX-XX-XX\"\n        />\n        <ErrorMessage name=\"number\" component={ValidationMessage} />\n\n        <Button type=\"submit\">Add contact</Button>\n      </FormWrapper>\n    </Formik>\n  );\n}\n\nexport default ContactsForm;\n","import styled from \"@emotion/styled/macro\";\n\nexport const Contacts = styled.ul`\n  margin-top: 20px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  padding: 10px;\n  border: 1px solid silver;\n  overflow: hidden;\n  border-radius: 5px;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n\n  & span {\n    display: inline-flex;\n    align-items: center;\n    margin-left: 10px;\n    margin-right: 40px;\n  }\n\n  & svg {\n    margin-right: 5px;\n  }\n`;\n\nexport const Button = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  min-width: 100px;\n  padding: 10px;\n  margin-left: 10px;\n  margin-right: 10px;\n\n  font-size: 14px;\n  font-weight: 700;\n  color: #fff;\n  background-color: steelblue;\n  border: 1px solid transparent;\n  border-radius: 5px;\n  cursor: pointer;\n  text-transform: capitalize;\n\n  &:hover,\n  &:focus {\n    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\n  }\n`;\n","export const getFilterValue = (state) => state.phonebook.filter;\n","import PropTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport { Contacts, Item, Button } from \"./ContactsList.styled\";\nimport { IoPerson } from \"react-icons/io5\";\nimport { ImPhone } from \"react-icons/im\";\nimport { getFilterValue } from \"redux/contacts/contacts-selectors\";\nimport toast from \"react-hot-toast\";\nimport {\n  useFetchContactsQuery,\n  useDeleteContactMutation,\n} from \"services/contactAPI\";\n\nfunction ContactsList() {\n  const filter = useSelector(getFilterValue);\n\n  const filteredContacts = (filterValue, contacts) => {\n    const normalizedFilter = filterValue.toLowerCase();\n    return contacts\n      ?.filter(\n        ({ name, number }) =>\n          name.toLowerCase().includes(normalizedFilter) ||\n          number.includes(normalizedFilter)\n      )\n      .sort((a, b) => a.name.localeCompare(b.name));\n  };\n\n  const { contacts, isFetching } = useFetchContactsQuery(null, {\n    refetchOnReconnect: true,\n    selectFromResult: ({ data }) => ({\n      contacts: filteredContacts(filter, data),\n    }),\n  });\n\n  const [deleteContact] = useDeleteContactMutation();\n\n  const handleDeleteContactOnClick = async (id, name) => {\n    try {\n      await deleteContact(id);\n      toast.success(`Contact ${name} deleted`);\n    } catch (error) {\n      toast.error(error);\n    }\n  };\n\n  return (\n    <Contacts>\n      {isFetching && <div>Loading...</div>}\n      {contacts &&\n        contacts.map(({ id, name, number }) => {\n          return (\n            <Item key={id}>\n              <span>\n                <IoPerson size={14} color=\"steelblue\" />\n                {name}:\n              </span>\n\n              <span>\n                <ImPhone size={14} color=\"steelblue\" />\n                {number}\n              </span>\n              <Button\n                type=\"button\"\n                onClick={() => handleDeleteContactOnClick(id, name)}\n              >\n                Delete\n              </Button>\n            </Item>\n          );\n        })}\n    </Contacts>\n  );\n}\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n};\n\nexport default ContactsList;\n","import styled from \"@emotion/styled/macro\";\n\nexport const Label = styled.label`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: 500;\n`;\n\nexport const Input = styled.input``;\n","import PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { nanoid } from \"nanoid\";\nimport { Label, Input } from \"./Filter.styled\";\nimport { actions } from \"redux/contacts\";\nimport { getFilterValue } from \"redux/contacts/contacts-selectors\";\n\nconst Filter = () => {\n  const filter = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Label htmlFor={`id-${nanoid(3)}`}>Find contacts by name</Label>\n      <Input\n        id={`id-${nanoid(3)}`}\n        type=\"text\"\n        name=\"name\"\n        value={filter}\n        onChange={(event) =>\n          dispatch(actions.getFilterValue(event.target.value))\n        }\n        placeholder=\"Search\"\n      />\n    </>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n\nexport default Filter;\n","import { Toaster } from \"react-hot-toast\";\n\nfunction Toast() {\n  return (\n    <Toaster\n      duration=\"5000\"\n      position=\"top-right\"\n      containerStyle={{ top: 100 }}\n      toastOptions={{\n        style: {\n          border: \"1px solid darksteelblue\",\n          padding: \"12px\",\n          color: \"darksteelblue\",\n        },\n      }}\n    />\n  );\n}\n\nexport default Toast;\n","import Container from \"components/Container/Container\";\nimport Section from \"components/Section/Section\";\nimport ContactsForm from \"components/Form/ContactsForm\";\nimport ContactsList from \"components/Contacts/ContactsList\";\nimport Filter from \"components/Filter/Filter\";\nimport Toast from \"components/Toast/Toast\";\n\nfunction App() {\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <ContactsForm />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <Filter />\n        <ContactsList />\n      </Section>\n      <Toast />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { store } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}